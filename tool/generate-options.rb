#!/usr/bin/env ruby

# Copyright (c) 2016, 2019 Oracle and/or its affiliates. All rights reserved.
# This code is released under a tri EPL/GPL/LGPL license. You can use it,
# redistribute it and/or modify it under the terms of the:
#
# Eclipse Public License version 1.0, or
# GNU General Public License version 2, or
# GNU Lesser General Public License version 2.1.

require 'ostruct'
require 'yaml'
require 'erb'

def camelize(string)
  string.sub(/^([a-z\d]*)/) { $1.capitalize }.gsub(/_([a-z\d]*)/) { $1.capitalize }
end

def parse_reference_defaults(default)
  match = /^!?[A-Z_]+(\s*\|\|\s*!?[A-Z_]+)*$/.match(default)
  if match
    match[0].split('||').map(&:strip)
  else
    nil
  end
end

options_data = YAML.load_file('tool/options.yml')

options = []

options_data.each do |category, category_options|
  category_options.each do |constant, values|
    raise "More or less than 4 arguments in #{values} for #{constant}" unless values.size == 4
    (name, *mri_names), type, default, description = values

    case type
    when 'boolean'
      type       = 'boolean'
      boxed_type = 'Boolean'
      if default.is_a?(Array)
        env_condition, default = default
      end
      default    = default.to_s
    when 'integer'
      type       = 'int'
      boxed_type = 'Integer'
      default    = default.to_s
    when /^enum\/(\w*)/
      name       = $1
      type       = camelize name
      boxed_type = type
      default    = "#{type}.#{default.to_s.upcase}"
    when 'string'
      type       = 'String'
      boxed_type = type
      default    = default.nil? ? 'null' : "\"#{default.to_s}\""
    when 'string-array'
      type             = 'String[]'
      boxed_type       = type
      type_description = 'StringArrayOptionDescription'
      default          = "new String[]{#{default.map(&:inspect).join(', ')}}"
    else
      raise type.to_s
    end

    options.push OpenStruct.new(
        category:          category,
        constant:          constant,
        name:              name,
        mri_names:         mri_names,
        type:              type,
        type_description:  type_description || "#{boxed_type}OptionDescription",
        boxed_type:        boxed_type,
        default:           default,
        reference_default: parse_reference_defaults(default),
        env_condition:     env_condition,
        description:       description + (mri_names.empty? ?
                                              '' : " (configured by the #{mri_names.join(', ')} Ruby option#{'s' if mri_names.size > 1})")
    )
  end
end

File.write('src/main/java/org/truffleruby/options/Options.java', ERB.new(<<JAVA).result)
/*
 * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved. This
 * code is released under a tri EPL/GPL/LGPL license. You can use it,
 * redistribute it and/or modify it under the terms of the:
 *
 * Eclipse Public License version 1.0, or
 * GNU General Public License version 2, or
 * GNU Lesser General Public License version 2.1.
 */
package org.truffleruby.options;

// This file is automatically generated by options.yml with 'jt build options'

import javax.annotation.Generated;

import org.truffleruby.shared.options.DefaultExecutionAction;
import org.truffleruby.shared.options.ExecutionAction;
import org.truffleruby.shared.options.OptionDescription;
import org.truffleruby.shared.options.OptionsCatalog;
import org.truffleruby.shared.options.ShowHelp;
import org.truffleruby.shared.options.Verbosity;

import com.oracle.truffle.api.TruffleLanguage.Env;

@Generated("tool/generate-options.rb")
public class Options {

    <% options.each do |o| %>public final <%= o.type %> <%= o.constant %>;
    <% end %>
    Options(OptionsBuilder builder, Env env) {
    <% options.each do |o| %>    <%= o.constant %> = <%= o.env_condition %>builder.getOrDefault(OptionsCatalog.<%= o.constant %><%= o.reference_default ? ', ' + o.default : '' %>);
    <% end %>}

    public Object fromDescription(OptionDescription<?> description) {
        switch (description.getName()) {
            <% options.each do |o| %>case "ruby.<%= o.name %>":
                return <%= o.constant %>;
            <% end %>default:
                return null;
        }
    }
}
JAVA

File.write('src/shared/java/org/truffleruby/shared/options/OptionsCatalog.java', ERB.new(<<JAVA).result)
/*
 * Copyright (c) 2016, 2018 Oracle and/or its affiliates. All rights reserved. This
 * code is released under a tri EPL/GPL/LGPL license. You can use it,
 * redistribute it and/or modify it under the terms of the:
 *
 * Eclipse Public License version 1.0, or
 * GNU General Public License version 2, or
 * GNU Lesser General Public License version 2.1.
 */
package org.truffleruby.shared.options;

// This file is automatically generated by options.yml with 'jt build options'

import org.graalvm.options.OptionCategory;

import javax.annotation.Generated;

@Generated("tool/generate-options.rb")
public class OptionsCatalog {

    <% options.each do |o| %>public static final <%= o.type_description %> <%= o.constant %> = new <%= o.type_description %>(
            OptionCategory.<%= o.category %>,
            "ruby.<%= o.name %>",
            "<%= o.description %>",
            <%= if o.mri_names.empty?
                  'null'
                else
                  'new String[]{' + o.mri_names.map(&:inspect).join(', ') + '}'
                end %>,
            <%= o.reference_default ? o.reference_default.map { |r| r + ".getDefaultValue()" }.join(" || ") : o.default %>);
    <% end %>
    public static OptionDescription<?> fromName(String name) {
        switch (name) {
            <% options.each do |o| %>case "ruby.<%= o.name %>":
                return <%= o.constant %>;
            <% end %>default:
                return null;
        }
    }

    public static OptionDescription<?>[] allDescriptions() {
        return new OptionDescription<?>[] {<% options.sort_by(&:name).each do |o| %>
            <%= o.constant %>,<% end %>
        };
    }

}
JAVA
