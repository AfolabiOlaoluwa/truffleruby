/*
 * Copyright (c) 2016, 2019 Oracle and/or its affiliates. All rights reserved. This
 * code is released under a tri EPL/GPL/LGPL license. You can use it,
 * redistribute it and/or modify it under the terms of the:
 *
 * Eclipse Public License version 1.0, or
 * GNU General Public License version 2, or
 * GNU Lesser General Public License version 2.1.
 */
package org.truffleruby.options;

// This file is automatically generated from options.yml with 'jt build options'

import javax.annotation.Generated;

import org.graalvm.options.OptionDescriptor;
import org.graalvm.options.OptionValues;
import org.truffleruby.shared.options.DefaultExecutionAction;
import org.truffleruby.shared.options.ExecutionAction;
import org.truffleruby.shared.options.OptionsCatalog;
import org.truffleruby.shared.options.ShowHelp;
import org.truffleruby.shared.options.Verbosity;

import com.oracle.truffle.api.TruffleLanguage.Env;

@Generated("tool/generate-options.rb")
public class Options {

    public final String[] LOAD_PATHS;
    public final String[] REQUIRED_LIBRARIES;
    public final String WORKING_DIRECTORY;
    public final boolean DEBUG;
    public final Verbosity VERBOSITY;
    public final String SOURCE_ENCODING;
    public final String INTERNAL_ENCODING;
    public final String EXTERNAL_ENCODING;
    public final String HOME;
    public final boolean NO_HOME_PROVIDED;
    public final String LAUNCHER;
    public final String CORE_LOAD_PATH;
    public final boolean FROZEN_STRING_LITERALS;
    public final boolean RUBYGEMS;
    public final boolean DEFAULT_LAZY;
    public final boolean LAZY_RUBYGEMS;
    public final boolean PATCHING;
    public final boolean DID_YOU_MEAN;
    public final boolean HASHING_DETERMINISTIC;
    public final boolean EMBEDDED;
    public final boolean NATIVE_PLATFORM;
    public final boolean NATIVE_INTERRUPT;
    public final boolean HANDLE_INTERRUPT;
    public final boolean SINGLE_THREADED;
    public final boolean POLYGLOT_STDIO;
    public final boolean HOST_INTEROP;
    public final boolean TRACE_CALLS;
    public final boolean COVERAGE_GLOBAL;
    public final boolean CORE_AS_INTERNAL;
    public final boolean STDLIB_AS_INTERNAL;
    public final boolean LAZY_TRANSLATION_USER;
    public final boolean EXCEPTIONS_STORE_JAVA;
    public final boolean EXCEPTIONS_PRINT_JAVA;
    public final boolean EXCEPTIONS_PRINT_UNCAUGHT_JAVA;
    public final boolean EXCEPTIONS_PRINT_RUBY_FOR_JAVA;
    public final boolean EXCEPTIONS_TRANSLATE_ASSERT;
    public final boolean EXCEPTIONS_WARN_STACKOVERFLOW;
    public final boolean EXCEPTIONS_WARN_OUT_OF_MEMORY;
    public final boolean BACKTRACES_HIDE_CORE_FILES;
    public final boolean BACKTRACES_INTERLEAVE_JAVA;
    public final int BACKTRACES_LIMIT;
    public final boolean BACKTRACES_OMIT_UNUSED;
    public final boolean BACKTRACE_ON_INTERRUPT;
    public final boolean BACKTRACE_ON_SIGALRM;
    public final boolean BACKTRACE_ON_RAISE;
    public final boolean CEXTS;
    public final boolean CEXT_LOCK;
    public final String[] CEXTS_LIBRARY_REMAP;
    public final boolean OPTIONS_LOG;
    public final boolean LOG_LOAD;
    public final boolean LOG_FEATURE_LOCATION;
    public final boolean CEXTS_LOG_LOAD;
    public final boolean CEXTS_LOG_WARNINGS;
    public final boolean ARGV_GLOBALS;
    public final boolean IGNORE_LINES_BEFORE_RUBY_SHEBANG;
    public final boolean SYNTAX_CHECK;
    public final boolean SHOW_VERSION;
    public final boolean SHOW_COPYRIGHT;
    public final ShowHelp SHOW_HELP;
    public final ExecutionAction EXECUTION_ACTION;
    public final String TO_EXECUTE;
    public final boolean READ_RUBYOPT;
    public final DefaultExecutionAction DEFAULT_EXECUTION_ACTION;
    public final String[] ARGV_GLOBAL_VALUES;
    public final String[] ARGV_GLOBAL_FLAGS;
    public final boolean BUILDING_CORE_CEXTS;
    public final boolean LAZY_TRANSLATION_LOG;
    public final boolean LOG_DYNAMIC_CONSTANT_LOOKUP;
    public final boolean ROPE_PRINT_INTERN_STATS;
    public final boolean PREINITIALIZATION;
    public final boolean LAZY_BUILTINS;
    public final boolean LAZY_CORE_METHOD_NODES;
    public final boolean LAZY_TRANSLATION_CORE;
    public final boolean BASICOPS_INLINE;
    public final boolean ROPE_LAZY_SUBSTRINGS;
    public final int DEFAULT_CACHE;
    public final int METHOD_LOOKUP_CACHE;
    public final int DISPATCH_CACHE;
    public final int YIELD_CACHE;
    public final int METHOD_TO_PROC_CACHE;
    public final int IS_A_CACHE;
    public final int BIND_CACHE;
    public final int CONSTANT_CACHE;
    public final int INSTANCE_VARIABLE_CACHE;
    public final int BINDING_LOCAL_VARIABLE_CACHE;
    public final int SYMBOL_TO_PROC_CACHE;
    public final int ALLOCATE_CLASS_CACHE;
    public final int PACK_CACHE;
    public final int UNPACK_CACHE;
    public final int EVAL_CACHE;
    public final int CLASS_CACHE;
    public final int ENCODING_COMPATIBLE_QUERY_CACHE;
    public final int ENCODING_LOADED_CLASSES_CACHE;
    public final int THREAD_CACHE;
    public final int ROPE_CLASS_CACHE;
    public final int INTEROP_CONVERT_CACHE;
    public final int INTEROP_EXECUTE_CACHE;
    public final int INTEROP_INVOKE_CACHE;
    public final int INTEROP_NEW_CACHE;
    public final int TIME_FORMAT_CACHE;
    public final int POW_CACHE;
    public final int ARRAY_DUP_CACHE;
    public final int FRAME_VARIABLE_ACCESS_CACHE;
    public final int ARRAY_UNINITIALIZED_SIZE;
    public final int ARRAY_SMALL;
    public final int HASH_PACKED_ARRAY_MAX;
    public final int PACK_UNROLL_LIMIT;
    public final int PACK_RECOVER_LOOP_MIN;
    public final int CEXTS_MARKING_CACHE;
    public final int ROPE_DEPTH_THRESHOLD;
    public final int GLOBAL_VARIABLE_MAX_INVALIDATIONS;
    public final boolean CLONE_DEFAULT;
    public final boolean INLINE_DEFAULT;
    public final boolean CORE_ALWAYS_CLONE;
    public final boolean PRIMITIVE_CALLERS_ALWAYS_CLONE;
    public final boolean ALWAYS_SPLIT_HONOR;
    public final boolean INLINE_NEEDS_CALLER_FRAME;
    public final boolean YIELD_ALWAYS_CLONE;
    public final boolean YIELD_ALWAYS_INLINE;
    public final boolean METHODMISSING_ALWAYS_CLONE;
    public final boolean METHODMISSING_ALWAYS_INLINE;
    public final boolean CALL_WITH_BLOCK_ALWAYS_CLONE;
    public final boolean REGEXP_INSTRUMENT_CREATION;
    public final boolean REGEXP_INSTRUMENT_MATCH;
    public final boolean METRICS_TIME_PARSING_FILE;
    public final boolean METRICS_TIME_REQUIRE;
    public final boolean SHARED_OBJECTS_ENABLED;
    public final boolean SHARED_OBJECTS_DEBUG;
    public final boolean SHARED_OBJECTS_FORCE;
    public final boolean SHARED_OBJECTS_SHARE_ALL;
    
    public Options(Env env, OptionValues options) {
        LOAD_PATHS = options.get(OptionsCatalog.LOAD_PATHS_KEY);
        REQUIRED_LIBRARIES = options.get(OptionsCatalog.REQUIRED_LIBRARIES_KEY);
        WORKING_DIRECTORY = options.get(OptionsCatalog.WORKING_DIRECTORY_KEY);
        DEBUG = options.get(OptionsCatalog.DEBUG_KEY);
        VERBOSITY = options.get(OptionsCatalog.VERBOSITY_KEY);
        SOURCE_ENCODING = options.get(OptionsCatalog.SOURCE_ENCODING_KEY);
        INTERNAL_ENCODING = options.get(OptionsCatalog.INTERNAL_ENCODING_KEY);
        EXTERNAL_ENCODING = options.get(OptionsCatalog.EXTERNAL_ENCODING_KEY);
        HOME = options.get(OptionsCatalog.HOME_KEY);
        NO_HOME_PROVIDED = options.get(OptionsCatalog.NO_HOME_PROVIDED_KEY);
        LAUNCHER = options.get(OptionsCatalog.LAUNCHER_KEY);
        CORE_LOAD_PATH = options.get(OptionsCatalog.CORE_LOAD_PATH_KEY);
        FROZEN_STRING_LITERALS = options.get(OptionsCatalog.FROZEN_STRING_LITERALS_KEY);
        RUBYGEMS = options.get(OptionsCatalog.RUBYGEMS_KEY);
        DEFAULT_LAZY = options.get(OptionsCatalog.DEFAULT_LAZY_KEY);
        LAZY_RUBYGEMS = options.hasBeenSet(OptionsCatalog.LAZY_RUBYGEMS_KEY) ? options.get(OptionsCatalog.LAZY_RUBYGEMS_KEY) : DEFAULT_LAZY;
        PATCHING = options.get(OptionsCatalog.PATCHING_KEY);
        DID_YOU_MEAN = options.get(OptionsCatalog.DID_YOU_MEAN_KEY);
        HASHING_DETERMINISTIC = options.get(OptionsCatalog.HASHING_DETERMINISTIC_KEY);
        EMBEDDED = options.get(OptionsCatalog.EMBEDDED_KEY);
        NATIVE_PLATFORM = env.isNativeAccessAllowed() && (options.get(OptionsCatalog.NATIVE_PLATFORM_KEY));
        NATIVE_INTERRUPT = options.hasBeenSet(OptionsCatalog.NATIVE_INTERRUPT_KEY) ? options.get(OptionsCatalog.NATIVE_INTERRUPT_KEY) : NATIVE_PLATFORM;
        HANDLE_INTERRUPT = options.hasBeenSet(OptionsCatalog.HANDLE_INTERRUPT_KEY) ? options.get(OptionsCatalog.HANDLE_INTERRUPT_KEY) : !EMBEDDED;
        SINGLE_THREADED = !env.isCreateThreadAllowed() || (options.hasBeenSet(OptionsCatalog.SINGLE_THREADED_KEY) ? options.get(OptionsCatalog.SINGLE_THREADED_KEY) : EMBEDDED);
        POLYGLOT_STDIO = options.hasBeenSet(OptionsCatalog.POLYGLOT_STDIO_KEY) ? options.get(OptionsCatalog.POLYGLOT_STDIO_KEY) : EMBEDDED || !NATIVE_PLATFORM;
        HOST_INTEROP = env.isHostLookupAllowed() && (options.get(OptionsCatalog.HOST_INTEROP_KEY));
        TRACE_CALLS = options.get(OptionsCatalog.TRACE_CALLS_KEY);
        COVERAGE_GLOBAL = options.get(OptionsCatalog.COVERAGE_GLOBAL_KEY);
        CORE_AS_INTERNAL = options.get(OptionsCatalog.CORE_AS_INTERNAL_KEY);
        STDLIB_AS_INTERNAL = options.get(OptionsCatalog.STDLIB_AS_INTERNAL_KEY);
        LAZY_TRANSLATION_USER = options.get(OptionsCatalog.LAZY_TRANSLATION_USER_KEY);
        EXCEPTIONS_STORE_JAVA = options.get(OptionsCatalog.EXCEPTIONS_STORE_JAVA_KEY);
        EXCEPTIONS_PRINT_JAVA = options.get(OptionsCatalog.EXCEPTIONS_PRINT_JAVA_KEY);
        EXCEPTIONS_PRINT_UNCAUGHT_JAVA = options.get(OptionsCatalog.EXCEPTIONS_PRINT_UNCAUGHT_JAVA_KEY);
        EXCEPTIONS_PRINT_RUBY_FOR_JAVA = options.get(OptionsCatalog.EXCEPTIONS_PRINT_RUBY_FOR_JAVA_KEY);
        EXCEPTIONS_TRANSLATE_ASSERT = options.get(OptionsCatalog.EXCEPTIONS_TRANSLATE_ASSERT_KEY);
        EXCEPTIONS_WARN_STACKOVERFLOW = options.get(OptionsCatalog.EXCEPTIONS_WARN_STACKOVERFLOW_KEY);
        EXCEPTIONS_WARN_OUT_OF_MEMORY = options.get(OptionsCatalog.EXCEPTIONS_WARN_OUT_OF_MEMORY_KEY);
        BACKTRACES_HIDE_CORE_FILES = options.get(OptionsCatalog.BACKTRACES_HIDE_CORE_FILES_KEY);
        BACKTRACES_INTERLEAVE_JAVA = options.get(OptionsCatalog.BACKTRACES_INTERLEAVE_JAVA_KEY);
        BACKTRACES_LIMIT = options.get(OptionsCatalog.BACKTRACES_LIMIT_KEY);
        BACKTRACES_OMIT_UNUSED = options.get(OptionsCatalog.BACKTRACES_OMIT_UNUSED_KEY);
        BACKTRACE_ON_INTERRUPT = options.get(OptionsCatalog.BACKTRACE_ON_INTERRUPT_KEY);
        BACKTRACE_ON_SIGALRM = options.hasBeenSet(OptionsCatalog.BACKTRACE_ON_SIGALRM_KEY) ? options.get(OptionsCatalog.BACKTRACE_ON_SIGALRM_KEY) : !EMBEDDED;
        BACKTRACE_ON_RAISE = options.get(OptionsCatalog.BACKTRACE_ON_RAISE_KEY);
        CEXTS = options.get(OptionsCatalog.CEXTS_KEY);
        CEXT_LOCK = options.get(OptionsCatalog.CEXT_LOCK_KEY);
        CEXTS_LIBRARY_REMAP = options.get(OptionsCatalog.CEXTS_LIBRARY_REMAP_KEY);
        OPTIONS_LOG = options.get(OptionsCatalog.OPTIONS_LOG_KEY);
        LOG_LOAD = options.get(OptionsCatalog.LOG_LOAD_KEY);
        LOG_FEATURE_LOCATION = options.get(OptionsCatalog.LOG_FEATURE_LOCATION_KEY);
        CEXTS_LOG_LOAD = options.get(OptionsCatalog.CEXTS_LOG_LOAD_KEY);
        CEXTS_LOG_WARNINGS = options.get(OptionsCatalog.CEXTS_LOG_WARNINGS_KEY);
        ARGV_GLOBALS = options.get(OptionsCatalog.ARGV_GLOBALS_KEY);
        IGNORE_LINES_BEFORE_RUBY_SHEBANG = options.get(OptionsCatalog.IGNORE_LINES_BEFORE_RUBY_SHEBANG_KEY);
        SYNTAX_CHECK = options.get(OptionsCatalog.SYNTAX_CHECK_KEY);
        SHOW_VERSION = options.get(OptionsCatalog.SHOW_VERSION_KEY);
        SHOW_COPYRIGHT = options.get(OptionsCatalog.SHOW_COPYRIGHT_KEY);
        SHOW_HELP = options.get(OptionsCatalog.SHOW_HELP_KEY);
        EXECUTION_ACTION = options.get(OptionsCatalog.EXECUTION_ACTION_KEY);
        TO_EXECUTE = options.get(OptionsCatalog.TO_EXECUTE_KEY);
        READ_RUBYOPT = options.get(OptionsCatalog.READ_RUBYOPT_KEY);
        DEFAULT_EXECUTION_ACTION = options.get(OptionsCatalog.DEFAULT_EXECUTION_ACTION_KEY);
        ARGV_GLOBAL_VALUES = options.get(OptionsCatalog.ARGV_GLOBAL_VALUES_KEY);
        ARGV_GLOBAL_FLAGS = options.get(OptionsCatalog.ARGV_GLOBAL_FLAGS_KEY);
        BUILDING_CORE_CEXTS = options.get(OptionsCatalog.BUILDING_CORE_CEXTS_KEY);
        LAZY_TRANSLATION_LOG = options.get(OptionsCatalog.LAZY_TRANSLATION_LOG_KEY);
        LOG_DYNAMIC_CONSTANT_LOOKUP = options.get(OptionsCatalog.LOG_DYNAMIC_CONSTANT_LOOKUP_KEY);
        ROPE_PRINT_INTERN_STATS = options.get(OptionsCatalog.ROPE_PRINT_INTERN_STATS_KEY);
        PREINITIALIZATION = options.get(OptionsCatalog.PREINITIALIZATION_KEY);
        LAZY_BUILTINS = options.hasBeenSet(OptionsCatalog.LAZY_BUILTINS_KEY) ? options.get(OptionsCatalog.LAZY_BUILTINS_KEY) : DEFAULT_LAZY;
        LAZY_CORE_METHOD_NODES = options.hasBeenSet(OptionsCatalog.LAZY_CORE_METHOD_NODES_KEY) ? options.get(OptionsCatalog.LAZY_CORE_METHOD_NODES_KEY) : DEFAULT_LAZY;
        LAZY_TRANSLATION_CORE = options.hasBeenSet(OptionsCatalog.LAZY_TRANSLATION_CORE_KEY) ? options.get(OptionsCatalog.LAZY_TRANSLATION_CORE_KEY) : DEFAULT_LAZY;
        BASICOPS_INLINE = options.get(OptionsCatalog.BASICOPS_INLINE_KEY);
        ROPE_LAZY_SUBSTRINGS = options.get(OptionsCatalog.ROPE_LAZY_SUBSTRINGS_KEY);
        DEFAULT_CACHE = options.get(OptionsCatalog.DEFAULT_CACHE_KEY);
        METHOD_LOOKUP_CACHE = options.hasBeenSet(OptionsCatalog.METHOD_LOOKUP_CACHE_KEY) ? options.get(OptionsCatalog.METHOD_LOOKUP_CACHE_KEY) : DEFAULT_CACHE;
        DISPATCH_CACHE = options.hasBeenSet(OptionsCatalog.DISPATCH_CACHE_KEY) ? options.get(OptionsCatalog.DISPATCH_CACHE_KEY) : DEFAULT_CACHE;
        YIELD_CACHE = options.hasBeenSet(OptionsCatalog.YIELD_CACHE_KEY) ? options.get(OptionsCatalog.YIELD_CACHE_KEY) : DEFAULT_CACHE;
        METHOD_TO_PROC_CACHE = options.hasBeenSet(OptionsCatalog.METHOD_TO_PROC_CACHE_KEY) ? options.get(OptionsCatalog.METHOD_TO_PROC_CACHE_KEY) : DEFAULT_CACHE;
        IS_A_CACHE = options.hasBeenSet(OptionsCatalog.IS_A_CACHE_KEY) ? options.get(OptionsCatalog.IS_A_CACHE_KEY) : DEFAULT_CACHE;
        BIND_CACHE = options.hasBeenSet(OptionsCatalog.BIND_CACHE_KEY) ? options.get(OptionsCatalog.BIND_CACHE_KEY) : DEFAULT_CACHE;
        CONSTANT_CACHE = options.hasBeenSet(OptionsCatalog.CONSTANT_CACHE_KEY) ? options.get(OptionsCatalog.CONSTANT_CACHE_KEY) : DEFAULT_CACHE;
        INSTANCE_VARIABLE_CACHE = options.hasBeenSet(OptionsCatalog.INSTANCE_VARIABLE_CACHE_KEY) ? options.get(OptionsCatalog.INSTANCE_VARIABLE_CACHE_KEY) : DEFAULT_CACHE;
        BINDING_LOCAL_VARIABLE_CACHE = options.hasBeenSet(OptionsCatalog.BINDING_LOCAL_VARIABLE_CACHE_KEY) ? options.get(OptionsCatalog.BINDING_LOCAL_VARIABLE_CACHE_KEY) : DEFAULT_CACHE;
        SYMBOL_TO_PROC_CACHE = options.hasBeenSet(OptionsCatalog.SYMBOL_TO_PROC_CACHE_KEY) ? options.get(OptionsCatalog.SYMBOL_TO_PROC_CACHE_KEY) : DEFAULT_CACHE;
        ALLOCATE_CLASS_CACHE = options.hasBeenSet(OptionsCatalog.ALLOCATE_CLASS_CACHE_KEY) ? options.get(OptionsCatalog.ALLOCATE_CLASS_CACHE_KEY) : DEFAULT_CACHE;
        PACK_CACHE = options.hasBeenSet(OptionsCatalog.PACK_CACHE_KEY) ? options.get(OptionsCatalog.PACK_CACHE_KEY) : DEFAULT_CACHE;
        UNPACK_CACHE = options.hasBeenSet(OptionsCatalog.UNPACK_CACHE_KEY) ? options.get(OptionsCatalog.UNPACK_CACHE_KEY) : DEFAULT_CACHE;
        EVAL_CACHE = options.hasBeenSet(OptionsCatalog.EVAL_CACHE_KEY) ? options.get(OptionsCatalog.EVAL_CACHE_KEY) : DEFAULT_CACHE;
        CLASS_CACHE = options.hasBeenSet(OptionsCatalog.CLASS_CACHE_KEY) ? options.get(OptionsCatalog.CLASS_CACHE_KEY) : DEFAULT_CACHE;
        ENCODING_COMPATIBLE_QUERY_CACHE = options.hasBeenSet(OptionsCatalog.ENCODING_COMPATIBLE_QUERY_CACHE_KEY) ? options.get(OptionsCatalog.ENCODING_COMPATIBLE_QUERY_CACHE_KEY) : DEFAULT_CACHE;
        ENCODING_LOADED_CLASSES_CACHE = options.hasBeenSet(OptionsCatalog.ENCODING_LOADED_CLASSES_CACHE_KEY) ? options.get(OptionsCatalog.ENCODING_LOADED_CLASSES_CACHE_KEY) : DEFAULT_CACHE;
        THREAD_CACHE = options.hasBeenSet(OptionsCatalog.THREAD_CACHE_KEY) ? options.get(OptionsCatalog.THREAD_CACHE_KEY) : DEFAULT_CACHE;
        ROPE_CLASS_CACHE = options.get(OptionsCatalog.ROPE_CLASS_CACHE_KEY);
        INTEROP_CONVERT_CACHE = options.hasBeenSet(OptionsCatalog.INTEROP_CONVERT_CACHE_KEY) ? options.get(OptionsCatalog.INTEROP_CONVERT_CACHE_KEY) : DEFAULT_CACHE;
        INTEROP_EXECUTE_CACHE = options.hasBeenSet(OptionsCatalog.INTEROP_EXECUTE_CACHE_KEY) ? options.get(OptionsCatalog.INTEROP_EXECUTE_CACHE_KEY) : DEFAULT_CACHE;
        INTEROP_INVOKE_CACHE = options.hasBeenSet(OptionsCatalog.INTEROP_INVOKE_CACHE_KEY) ? options.get(OptionsCatalog.INTEROP_INVOKE_CACHE_KEY) : DEFAULT_CACHE;
        INTEROP_NEW_CACHE = options.hasBeenSet(OptionsCatalog.INTEROP_NEW_CACHE_KEY) ? options.get(OptionsCatalog.INTEROP_NEW_CACHE_KEY) : DEFAULT_CACHE;
        TIME_FORMAT_CACHE = options.hasBeenSet(OptionsCatalog.TIME_FORMAT_CACHE_KEY) ? options.get(OptionsCatalog.TIME_FORMAT_CACHE_KEY) : DEFAULT_CACHE;
        POW_CACHE = options.hasBeenSet(OptionsCatalog.POW_CACHE_KEY) ? options.get(OptionsCatalog.POW_CACHE_KEY) : DEFAULT_CACHE;
        ARRAY_DUP_CACHE = options.get(OptionsCatalog.ARRAY_DUP_CACHE_KEY);
        FRAME_VARIABLE_ACCESS_CACHE = options.get(OptionsCatalog.FRAME_VARIABLE_ACCESS_CACHE_KEY);
        ARRAY_UNINITIALIZED_SIZE = options.get(OptionsCatalog.ARRAY_UNINITIALIZED_SIZE_KEY);
        ARRAY_SMALL = options.get(OptionsCatalog.ARRAY_SMALL_KEY);
        HASH_PACKED_ARRAY_MAX = options.get(OptionsCatalog.HASH_PACKED_ARRAY_MAX_KEY);
        PACK_UNROLL_LIMIT = options.get(OptionsCatalog.PACK_UNROLL_LIMIT_KEY);
        PACK_RECOVER_LOOP_MIN = options.get(OptionsCatalog.PACK_RECOVER_LOOP_MIN_KEY);
        CEXTS_MARKING_CACHE = options.get(OptionsCatalog.CEXTS_MARKING_CACHE_KEY);
        ROPE_DEPTH_THRESHOLD = options.get(OptionsCatalog.ROPE_DEPTH_THRESHOLD_KEY);
        GLOBAL_VARIABLE_MAX_INVALIDATIONS = options.get(OptionsCatalog.GLOBAL_VARIABLE_MAX_INVALIDATIONS_KEY);
        CLONE_DEFAULT = options.get(OptionsCatalog.CLONE_DEFAULT_KEY);
        INLINE_DEFAULT = options.get(OptionsCatalog.INLINE_DEFAULT_KEY);
        CORE_ALWAYS_CLONE = options.hasBeenSet(OptionsCatalog.CORE_ALWAYS_CLONE_KEY) ? options.get(OptionsCatalog.CORE_ALWAYS_CLONE_KEY) : CLONE_DEFAULT;
        PRIMITIVE_CALLERS_ALWAYS_CLONE = options.hasBeenSet(OptionsCatalog.PRIMITIVE_CALLERS_ALWAYS_CLONE_KEY) ? options.get(OptionsCatalog.PRIMITIVE_CALLERS_ALWAYS_CLONE_KEY) : CLONE_DEFAULT;
        ALWAYS_SPLIT_HONOR = options.hasBeenSet(OptionsCatalog.ALWAYS_SPLIT_HONOR_KEY) ? options.get(OptionsCatalog.ALWAYS_SPLIT_HONOR_KEY) : CLONE_DEFAULT;
        INLINE_NEEDS_CALLER_FRAME = options.hasBeenSet(OptionsCatalog.INLINE_NEEDS_CALLER_FRAME_KEY) ? options.get(OptionsCatalog.INLINE_NEEDS_CALLER_FRAME_KEY) : INLINE_DEFAULT;
        YIELD_ALWAYS_CLONE = options.hasBeenSet(OptionsCatalog.YIELD_ALWAYS_CLONE_KEY) ? options.get(OptionsCatalog.YIELD_ALWAYS_CLONE_KEY) : CLONE_DEFAULT;
        YIELD_ALWAYS_INLINE = options.hasBeenSet(OptionsCatalog.YIELD_ALWAYS_INLINE_KEY) ? options.get(OptionsCatalog.YIELD_ALWAYS_INLINE_KEY) : INLINE_DEFAULT;
        METHODMISSING_ALWAYS_CLONE = options.hasBeenSet(OptionsCatalog.METHODMISSING_ALWAYS_CLONE_KEY) ? options.get(OptionsCatalog.METHODMISSING_ALWAYS_CLONE_KEY) : CLONE_DEFAULT;
        METHODMISSING_ALWAYS_INLINE = options.hasBeenSet(OptionsCatalog.METHODMISSING_ALWAYS_INLINE_KEY) ? options.get(OptionsCatalog.METHODMISSING_ALWAYS_INLINE_KEY) : INLINE_DEFAULT;
        CALL_WITH_BLOCK_ALWAYS_CLONE = options.hasBeenSet(OptionsCatalog.CALL_WITH_BLOCK_ALWAYS_CLONE_KEY) ? options.get(OptionsCatalog.CALL_WITH_BLOCK_ALWAYS_CLONE_KEY) : CLONE_DEFAULT;
        REGEXP_INSTRUMENT_CREATION = options.get(OptionsCatalog.REGEXP_INSTRUMENT_CREATION_KEY);
        REGEXP_INSTRUMENT_MATCH = options.get(OptionsCatalog.REGEXP_INSTRUMENT_MATCH_KEY);
        METRICS_TIME_PARSING_FILE = options.get(OptionsCatalog.METRICS_TIME_PARSING_FILE_KEY);
        METRICS_TIME_REQUIRE = options.get(OptionsCatalog.METRICS_TIME_REQUIRE_KEY);
        SHARED_OBJECTS_ENABLED = options.get(OptionsCatalog.SHARED_OBJECTS_ENABLED_KEY);
        SHARED_OBJECTS_DEBUG = options.get(OptionsCatalog.SHARED_OBJECTS_DEBUG_KEY);
        SHARED_OBJECTS_FORCE = options.get(OptionsCatalog.SHARED_OBJECTS_FORCE_KEY);
        SHARED_OBJECTS_SHARE_ALL = options.get(OptionsCatalog.SHARED_OBJECTS_SHARE_ALL_KEY);
    }

    public Object fromDescriptor(OptionDescriptor descriptor) {
        switch (descriptor.getName()) {
            case "ruby.load-paths":
                return LOAD_PATHS;
            case "ruby.required-libraries":
                return REQUIRED_LIBRARIES;
            case "ruby.working-directory":
                return WORKING_DIRECTORY;
            case "ruby.debug":
                return DEBUG;
            case "ruby.verbose":
                return VERBOSITY;
            case "ruby.source-encoding":
                return SOURCE_ENCODING;
            case "ruby.internal-encoding":
                return INTERNAL_ENCODING;
            case "ruby.external-encoding":
                return EXTERNAL_ENCODING;
            case "ruby.home":
                return HOME;
            case "ruby.no_home_provided":
                return NO_HOME_PROVIDED;
            case "ruby.launcher":
                return LAUNCHER;
            case "ruby.core.load_path":
                return CORE_LOAD_PATH;
            case "ruby.frozen_string_literals":
                return FROZEN_STRING_LITERALS;
            case "ruby.rubygems":
                return RUBYGEMS;
            case "ruby.lazy.default":
                return DEFAULT_LAZY;
            case "ruby.rubygems.lazy":
                return LAZY_RUBYGEMS;
            case "ruby.patching":
                return PATCHING;
            case "ruby.did_you_mean":
                return DID_YOU_MEAN;
            case "ruby.hashing.deterministic":
                return HASHING_DETERMINISTIC;
            case "ruby.embedded":
                return EMBEDDED;
            case "ruby.platform.native":
                return NATIVE_PLATFORM;
            case "ruby.platform.native_interrupt":
                return NATIVE_INTERRUPT;
            case "ruby.platform.handle_interrupt":
                return HANDLE_INTERRUPT;
            case "ruby.single_threaded":
                return SINGLE_THREADED;
            case "ruby.polyglot.stdio":
                return POLYGLOT_STDIO;
            case "ruby.interop.host":
                return HOST_INTEROP;
            case "ruby.trace.calls":
                return TRACE_CALLS;
            case "ruby.coverage.global":
                return COVERAGE_GLOBAL;
            case "ruby.core_as_internal":
                return CORE_AS_INTERNAL;
            case "ruby.stdlib_as_internal":
                return STDLIB_AS_INTERNAL;
            case "ruby.lazy_translation.user":
                return LAZY_TRANSLATION_USER;
            case "ruby.exceptions.store_java":
                return EXCEPTIONS_STORE_JAVA;
            case "ruby.exceptions.print_java":
                return EXCEPTIONS_PRINT_JAVA;
            case "ruby.exceptions.print_uncaught_java":
                return EXCEPTIONS_PRINT_UNCAUGHT_JAVA;
            case "ruby.exceptions.print_ruby_for_java":
                return EXCEPTIONS_PRINT_RUBY_FOR_JAVA;
            case "ruby.exceptions.translate_assert":
                return EXCEPTIONS_TRANSLATE_ASSERT;
            case "ruby.exceptions.warn_stackoverflow":
                return EXCEPTIONS_WARN_STACKOVERFLOW;
            case "ruby.exceptions.warn_out_of_memory":
                return EXCEPTIONS_WARN_OUT_OF_MEMORY;
            case "ruby.backtraces.hide_core_files":
                return BACKTRACES_HIDE_CORE_FILES;
            case "ruby.backtraces.interleave_java":
                return BACKTRACES_INTERLEAVE_JAVA;
            case "ruby.backtraces.limit":
                return BACKTRACES_LIMIT;
            case "ruby.backtraces.omit_unused":
                return BACKTRACES_OMIT_UNUSED;
            case "ruby.backtraces.on_interrupt":
                return BACKTRACE_ON_INTERRUPT;
            case "ruby.backtraces.sigalrm":
                return BACKTRACE_ON_SIGALRM;
            case "ruby.backtraces.raise":
                return BACKTRACE_ON_RAISE;
            case "ruby.cexts":
                return CEXTS;
            case "ruby.cexts.lock":
                return CEXT_LOCK;
            case "ruby.cexts.remap":
                return CEXTS_LIBRARY_REMAP;
            case "ruby.options.log":
                return OPTIONS_LOG;
            case "ruby.log.load":
                return LOG_LOAD;
            case "ruby.log.feature_location":
                return LOG_FEATURE_LOCATION;
            case "ruby.cexts.log.load":
                return CEXTS_LOG_LOAD;
            case "ruby.cexts.log.warnings":
                return CEXTS_LOG_WARNINGS;
            case "ruby.argv_globals":
                return ARGV_GLOBALS;
            case "ruby.ignore_lines_before_ruby_shebang":
                return IGNORE_LINES_BEFORE_RUBY_SHEBANG;
            case "ruby.syntax_check":
                return SYNTAX_CHECK;
            case "ruby.show_version":
                return SHOW_VERSION;
            case "ruby.show_copyright":
                return SHOW_COPYRIGHT;
            case "ruby.show_help":
                return SHOW_HELP;
            case "ruby.execution_action":
                return EXECUTION_ACTION;
            case "ruby.to_execute":
                return TO_EXECUTE;
            case "ruby.read_rubyopt":
                return READ_RUBYOPT;
            case "ruby.default_execution_action":
                return DEFAULT_EXECUTION_ACTION;
            case "ruby.argv_global_values":
                return ARGV_GLOBAL_VALUES;
            case "ruby.argv_global_flags":
                return ARGV_GLOBAL_FLAGS;
            case "ruby.building.core.cexts":
                return BUILDING_CORE_CEXTS;
            case "ruby.lazy_translation.log":
                return LAZY_TRANSLATION_LOG;
            case "ruby.constant.dynamic_lookup.log":
                return LOG_DYNAMIC_CONSTANT_LOOKUP;
            case "ruby.rope.print_intern_stats":
                return ROPE_PRINT_INTERN_STATS;
            case "ruby.preinit":
                return PREINITIALIZATION;
            case "ruby.lazy_builtins":
                return LAZY_BUILTINS;
            case "ruby.lazy_core_method_nodes":
                return LAZY_CORE_METHOD_NODES;
            case "ruby.lazy_translation.core":
                return LAZY_TRANSLATION_CORE;
            case "ruby.basic_ops.inline":
                return BASICOPS_INLINE;
            case "ruby.rope.lazy_substrings":
                return ROPE_LAZY_SUBSTRINGS;
            case "ruby.default_cache":
                return DEFAULT_CACHE;
            case "ruby.method_lookup.cache":
                return METHOD_LOOKUP_CACHE;
            case "ruby.dispatch.cache":
                return DISPATCH_CACHE;
            case "ruby.yield.cache":
                return YIELD_CACHE;
            case "ruby.to_proc.cache":
                return METHOD_TO_PROC_CACHE;
            case "ruby.is_a.cache":
                return IS_A_CACHE;
            case "ruby.bind.cache":
                return BIND_CACHE;
            case "ruby.constant.cache":
                return CONSTANT_CACHE;
            case "ruby.instance_variable.cache":
                return INSTANCE_VARIABLE_CACHE;
            case "ruby.binding_local_variable.cache":
                return BINDING_LOCAL_VARIABLE_CACHE;
            case "ruby.symbol_to_proc.cache":
                return SYMBOL_TO_PROC_CACHE;
            case "ruby.allocate_class.cache":
                return ALLOCATE_CLASS_CACHE;
            case "ruby.pack.cache":
                return PACK_CACHE;
            case "ruby.unpack.cache":
                return UNPACK_CACHE;
            case "ruby.eval.cache":
                return EVAL_CACHE;
            case "ruby.class.cache":
                return CLASS_CACHE;
            case "ruby.encoding_compatible_query.cache":
                return ENCODING_COMPATIBLE_QUERY_CACHE;
            case "ruby.encoding_loaded_classes.cache":
                return ENCODING_LOADED_CLASSES_CACHE;
            case "ruby.thread.cache":
                return THREAD_CACHE;
            case "ruby.rope_class.cache":
                return ROPE_CLASS_CACHE;
            case "ruby.interop.convert.cache":
                return INTEROP_CONVERT_CACHE;
            case "ruby.interop.execute.cache":
                return INTEROP_EXECUTE_CACHE;
            case "ruby.interop.invoke.cache":
                return INTEROP_INVOKE_CACHE;
            case "ruby.interop.new.cache":
                return INTEROP_NEW_CACHE;
            case "ruby.time.format.cache":
                return TIME_FORMAT_CACHE;
            case "ruby.integer.pow.cache":
                return POW_CACHE;
            case "ruby.array.dup.cache":
                return ARRAY_DUP_CACHE;
            case "ruby.frame.variable.access.cache":
                return FRAME_VARIABLE_ACCESS_CACHE;
            case "ruby.array.uninitialized_size":
                return ARRAY_UNINITIALIZED_SIZE;
            case "ruby.array.small":
                return ARRAY_SMALL;
            case "ruby.hash.packed_array.max":
                return HASH_PACKED_ARRAY_MAX;
            case "ruby.pack.unroll":
                return PACK_UNROLL_LIMIT;
            case "ruby.pack.recover":
                return PACK_RECOVER_LOOP_MIN;
            case "ruby.cexts.marking.cache":
                return CEXTS_MARKING_CACHE;
            case "ruby.rope.depth_threshold":
                return ROPE_DEPTH_THRESHOLD;
            case "ruby.global_variable.max_invalidations":
                return GLOBAL_VARIABLE_MAX_INVALIDATIONS;
            case "ruby.clone.default":
                return CLONE_DEFAULT;
            case "ruby.inline.default":
                return INLINE_DEFAULT;
            case "ruby.core.always_clone":
                return CORE_ALWAYS_CLONE;
            case "ruby.primitive_callers.always_clone":
                return PRIMITIVE_CALLERS_ALWAYS_CLONE;
            case "ruby.always_split.honor":
                return ALWAYS_SPLIT_HONOR;
            case "ruby.inline_needs_caller_frame":
                return INLINE_NEEDS_CALLER_FRAME;
            case "ruby.yield.always_clone":
                return YIELD_ALWAYS_CLONE;
            case "ruby.yield.always_inline":
                return YIELD_ALWAYS_INLINE;
            case "ruby.method_missing.always_clone":
                return METHODMISSING_ALWAYS_CLONE;
            case "ruby.method_missing.always_inline":
                return METHODMISSING_ALWAYS_INLINE;
            case "ruby.call_with_block.always_clone":
                return CALL_WITH_BLOCK_ALWAYS_CLONE;
            case "ruby.regexp.instrument-creation":
                return REGEXP_INSTRUMENT_CREATION;
            case "ruby.regexp.instrument-match":
                return REGEXP_INSTRUMENT_MATCH;
            case "ruby.metrics.time.parsing.file":
                return METRICS_TIME_PARSING_FILE;
            case "ruby.metrics.time.require":
                return METRICS_TIME_REQUIRE;
            case "ruby.shared.objects":
                return SHARED_OBJECTS_ENABLED;
            case "ruby.shared.objects.debug":
                return SHARED_OBJECTS_DEBUG;
            case "ruby.shared.objects.force":
                return SHARED_OBJECTS_FORCE;
            case "ruby.shared.objects.share_all":
                return SHARED_OBJECTS_SHARE_ALL;
            default:
                return null;
        }
    }
}
