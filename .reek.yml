detectors:
  UncommunicativeVariableName:
    enabled: false  # we're happy with short variable names
  UncommunicativeParameterName:
    enabled: false  # we're happy with short parameter names
  LongParameterList:
    enabled: false  # we're often meeting an existing Ruby API with fixed parameters
  UncommunicativeModuleName:
    enabled: false  # we're often meeting an existing Ruby API with fixed module names
  UncommunicativeMethodName:
    enabled: false  # we're often meeting an existing Ruby API with fixed method names
  BooleanParameter:
    enabled: false  # we're often meeting an existing Ruby API with boolean parameters
  TooManyStatements:
    enabled: false  # yes we often write longer methods
  FeatureEnvy:
    enabled: false  # we don't want to add new public methods to Ruby API classes to better encapsulate behaviour
  UnusedParameters:
    enabled: false  # primitives mean that the use of parameters can be hidden
  NilCheck:
    enabled: false  # our code is often too low level to factor this away
  ManualDispatch:
    enabled: false  # manual dispatch is often part of Ruby internal semantics
  IrresponsibleModule:
    enabled: false  # we don't comment all modules because we're implementing an existing interface so they do not need a raison d'Ãªtre
  ControlParameter:
    enabled: false  # we're often meeting an existing Ruby API with control parameters
  DataClump:
    enabled: false  # we're often meeting an existing Ruby API with 'data clumps'
  TooManyMethods:
    enabled: false  # we're often meeting an existing Ruby API with an existing set of methods
  TooManyConstants:
    enabled: false  # we're often meeting an existing Ruby API with an existing set of constants
  UtilityFunction:
    enabled: false  # we're often meeting an existing Ruby API with utility functions
  MissingSafeMethod:
    enabled: false  # we're often meeting an existing Ruby API without safe equivalents, or the safe equivalent is implemented in Java
  Attribute:
    enabled: false  # we're often meeting an existing Ruby API with writable attributes
  InstanceVariableAssumption:
    enabled: false  # we often set instance variables lazily
  NestedIterators:
    enabled: false  # yes we often write nested iterators
  TooManyInstanceVariables:
    enabled: false  # yes we sometimes use a lot of instance variables
  RepeatedConditional:
    enabled: false  # we don't want to add new public methods to Ruby API classes to better encapsulate behaviour
  DuplicateMethodCall:
    enabled: false  # needs investigation - sometimes legitimate due to Ruby semantics, but lots of failures
