fails:Integer#pow one argument is passed fixnum returns self raised to the given power
fails:Integer#pow one argument is passed fixnum overflows the answer to a bignum transparently
fails:Integer#pow one argument is passed fixnum raises negative numbers to the given power
fails:Integer#pow one argument is passed fixnum can raise 1 to a bignum safely
fails:Integer#pow one argument is passed fixnum can raise -1 to a bignum safely
fails:Integer#pow one argument is passed fixnum returns Float::INFINITY when the number is too big
fails:Integer#pow one argument is passed fixnum raises a ZeroDivisionError for 0 ** -1
fails:Integer#pow one argument is passed fixnum returns Float::INFINITY for 0 ** -1.0
fails:Integer#pow one argument is passed fixnum raises a TypeError when given a non-numeric power
fails:Integer#pow one argument is passed fixnum coerces power and calls #**
fails:Integer#pow one argument is passed fixnum returns Float when power is Float
fails:Integer#pow one argument is passed fixnum returns Rational when power is Rational
fails:Integer#pow one argument is passed fixnum returns a complex number when negative and raised to a fractional power
fails:Integer#pow one argument is passed bignum returns self raised to other power
fails:Integer#pow one argument is passed bignum raises a TypeError when given a non-Integer
fails:Integer#pow one argument is passed bignum switch to a Float when the values is too big
fails:Integer#pow one argument is passed bignum returns a complex number when negative and raised to a fractional power
fails:Integer#pow two arguments are passed returns modulo of self raised to the given power
fails:Integer#pow two arguments are passed works well with bignums
fails:Integer#pow two arguments are passed handles sign like #divmod does
fails:Integer#pow two arguments are passed ensures all arguments are integers
fails:Integer#pow two arguments are passed raises TypeError for non-numeric value
fails:Integer#pow two arguments are passed raises a ZeroDivisionError when the given argument is 0
